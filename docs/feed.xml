<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cloxnu's blog</title>
    <description>A simple, beautiful theme for Jekyll that emphasizes content rather than aesthetic fluff.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>The Amazing Things</title>
        <description>&lt;p&gt;Now, here is another new place to inspire and create amazing things. There is not much space here, but it brings extraordinary encouragement.&lt;/p&gt;

&lt;p&gt;I will always love, and pursue love.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/2021-02-12-the-amazing-things/screenshot.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Feb 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/love/2021/02/12/the-amazing-things/</link>
        <guid isPermaLink="true">http://localhost:4000/love/2021/02/12/the-amazing-things/</guid>
      </item>
    
      <item>
        <title>Generalized Suffix Tree</title>
        <description>
&lt;p&gt;An implementation of generalized suffix tree using Ukkonen’s algorithm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this page:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#the-longest-common-substring-problem&quot;&gt;The longest common substring problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-it-works&quot;&gt;How it works&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gst-versus-dynamic-programming&quot;&gt;GST versus Dynamic programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Inspired by:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ukkonen, E. On-line construction of suffix trees. Algorithmica 14, 249–260 (1995).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf&quot;&gt;https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-longest-common-substring-problem&quot;&gt;The longest common substring problem&lt;/h2&gt;

&lt;p&gt;Given two or more strings, find the longest common substring of these strings. Concretely, the longest common substring of the two strings &lt;em&gt;“cacaocac”&lt;/em&gt; and &lt;em&gt;“ccaooc”&lt;/em&gt; is &lt;em&gt;“cao”&lt;/em&gt;. This seems like a simple problem, but until today, it still requires a complicated algorithm to be solved in a reasonable time.&lt;/p&gt;

&lt;p&gt;This repo has implemented an algorithm to solve this problem by constructing a tree called Generalized Suffix Tree (GST). GST is a tree structure which contains sets of suffix strings of the origin string. Usually, the string will be appended a unique character &lt;em&gt;”$”&lt;/em&gt; for representing “the end”, this is to avoid some nodes not splitting due to repeated ending characters.&lt;/p&gt;

&lt;p&gt;There are 2 algorithms for constructing a GST: &lt;strong&gt;McCreight’s algorithm (1976)&lt;/strong&gt;, &lt;strong&gt;Ukkonen’s algorithm (1995)&lt;/strong&gt;. The latter has been implemented here.&lt;/p&gt;

&lt;p&gt;The visualized GST of &lt;em&gt;“cacaocac$”&lt;/em&gt; as follows, made in &lt;a href=&quot;http://brenden.github.io/ukkonen-animation/&quot;&gt;http://brenden.github.io/ukkonen-animation/&lt;/a&gt; :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/2020-12-23-generalized-suffix-tree/GST4cacaocac.png&quot; alt=&quot;GST-for-cacaocac&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;After cloning this repo, we can get the same result by running these codes in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application.py&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_with_automatic_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cacaocac&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then, something will appear in the console:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cacaocac$ ----&amp;gt; ⊥
c ----&amp;gt; cacaocac$
	a ----&amp;gt; a
		c ----&amp;gt; c
			aocac$ (end)
			$ (end)
		ocac$ (end)
	$ (end)
a ----&amp;gt; cacaocac$
	c ----&amp;gt; c
		aocac$ (end)
		$ (end)
	ocac$ (end)
ocac$ (end)
$ (end)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cacaocac$&lt;/code&gt; for root, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⊥&lt;/code&gt; for auxiliary state&lt;sup&gt;*&lt;/sup&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;----&amp;gt;&lt;/code&gt; for suffix link&lt;sup&gt;*&lt;/sup&gt;, and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[tab]&lt;/code&gt; represents a deeper level in the tree.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;sup&gt;*&lt;/sup&gt;auxiliary state: The dummy status of the root’s suffix link, for convenience in programming.
[Page 3 of the paper for details]&lt;/p&gt;

  &lt;p&gt;&lt;sup&gt;*&lt;/sup&gt;suffix link: Used during the construction of a suffix tree.
[Page 4 of the paper for details]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_update&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_test_and_split&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_canonize&lt;/code&gt; of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STree&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STree.py&lt;/code&gt;, are the complete implementation of the procedure of the same name in the page [12] and [13] in the paper, and the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; corresponds to the [Algorithm 2.] in the page [14].&lt;/p&gt;

&lt;p&gt;But differently, the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end_idxes&lt;/code&gt; property in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STree&lt;/code&gt; contains the indexes of all ending characters &lt;em&gt;”$”&lt;/em&gt;. It avoids effectively the construction bias of the suffix tree when the string contains or is filled with &lt;em&gt;”$”&lt;/em&gt; symbols.&lt;/p&gt;

&lt;p&gt;So, back to the topic, how does this tree solve the longest common substring problem?&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application.py&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lcs2&lt;/code&gt; function find the lcs of two strings. The method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build_with_automatic_end&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STree&lt;/code&gt; will concatenate a list of strings with the ending characters &lt;em&gt;”$”&lt;/em&gt;, and construct a suffix tree. With the help of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end_idxes&lt;/code&gt;, these &lt;em&gt;”$”&lt;/em&gt; are different, and they represent the end of different strings. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STree&lt;/code&gt; will automatically treat these &lt;em&gt;”$”&lt;/em&gt; as different from other characters, so the character &lt;em&gt;”$”&lt;/em&gt; itself is just designed for readability of suffix tree printing. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lcs2&lt;/code&gt; function will traverse the tree and find the deepest non-leaf node that contains the leaf nodes of all string indexes in the string list.&lt;/p&gt;

&lt;p&gt;Similarly, it can also be demonstrated using the following codes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application.py&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcs2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cacaocac&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ccaooc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cacaocac&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ccaooc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lcs&lt;/code&gt; function can find the longest common substring of multiple strings.&lt;/p&gt;

&lt;p&gt;The last two commands have the same result:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cao
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;gst-versus-dynamic-programming&quot;&gt;GST versus Dynamic programming&lt;/h2&gt;

&lt;p&gt;Dynamic programming is another way to solve this problem, and there is always said that the dynamic programming costs \(\Theta(mn)\), and the Ukkonen’s Algorithm just in linear time. So, let’s start an experiment.&lt;/p&gt;

&lt;p&gt;The code in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gst_vs_dp.py&lt;/code&gt;, we randomly generated some strings to examine the performance of the two algorithms.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; is the length range of the strings, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com_len&lt;/code&gt; is the length range of the common part of the strings.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len = (800, 1600)&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com_len = (100, 200)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;random string has been generated
gst_res: wTE^s&amp;gt;:x,k~%i3pRtdasZ&amp;gt;eLXrU5gbU#ptQF*?$ta,)k~znS*D/Ja:0L}@.X~i~E~{@NsKlK5c#`4v?v.$O]ts&amp;amp;/LNl&amp;lt;m]ww`Z!4G3vPd:@guRfCuz3DSRNHcVu~[r7s8J`X&amp;amp;/uETtiU[$N0p2.$SV2T&amp;gt;&amp;lt;WTzqLVm:KkC3uE#2SIj63h?3BZYv;G*bl'PnNYhQ0M
dp_res: wTE^s&amp;gt;:x,k~%i3pRtdasZ&amp;gt;eLXrU5gbU#ptQF*?$ta,)k~znS*D/Ja:0L}@.X~i~E~{@NsKlK5c#`4v?v.$O]ts&amp;amp;/LNl&amp;lt;m]ww`Z!4G3vPd:@guRfCuz3DSRNHcVu~[r7s8J`X&amp;amp;/uETtiU[$N0p2.$SV2T&amp;gt;&amp;lt;WTzqLVm:KkC3uE#2SIj63h?3BZYv;G*bl'PnNYhQ0M

gst_time: 12.598991394042969 ms
dp_time: 284.3668460845947 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len = (5000, 8000)&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com_len = (250, 800)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;random string has been generated
gst_res: q3U'GCA9;dw}9nrT#R?&quot;odw~HAK,&amp;amp;l;bd}VQ)h`15TAw6K/I1V]#;OSDj%(XmDp[&amp;amp;i}@$k($Bk8X4c&quot;j(rXff9MK:E#`&amp;gt;B&amp;amp;'SF`CgMP&amp;lt;`XOp!8g%&amp;amp;4fpbq&amp;lt;!Q*o4[9W}TXabj4FTele0?~Cm.S,8~)B(U9&amp;lt;m~[1.9/3XGR/@nIt,X3@k}D&quot;U&quot;h@!/C&amp;amp;92s09RU^DLrqo6[}s}Wlr:,VyYX&amp;gt;f{rx&amp;amp;&amp;gt;8bH`VaZy^3pId.A]XO/zgD@26wN:Y23@t(.&amp;gt;3$T6c8?L'l&quot;ZC?0PK,2tWNqa,S&amp;gt;VTe!!%L^n;;up&amp;lt;:Hw;gUtFp^dD]F8&amp;gt;!'}vg^PNK4K&quot;L7X&amp;lt;w;roH:&amp;amp;&amp;lt;jEzZJJPg5qd'J!SWTP%N!CDDaxr7vBX.4@)9OO!Mg;S;M';VSV]^YZO9ww9k$H;Z^XcXKY@?Naa&amp;lt;jO$LEy`#e1&amp;amp;ywU8Yzq9PNAA^gQ58B?'?)KiKt)$ztM~IrnJ&amp;lt;$;2%%?m&quot;&amp;lt;dme7df&amp;gt;:b?j.A8dM2dH/!K!*o)glG[F&amp;gt;&amp;lt;aZ?c`By5{zEICgq[&amp;lt;M:D&quot;LD;*FPJOzo9o,wXxKz@2];:g$oNrDhc/g{M9z9xTP[FllH/r!YrW!KMG!y(.$mO7Wzj31vMF2&amp;gt;YD?Y&quot;I?t7FX!nWL[S&amp;gt;kLN1Ga7YN'XrG*fxylmtBri/R!0nEGQ3ZG`xQ1o[~Z?1&amp;lt;VKMzKn90J^9#5J&amp;lt;:{3diD*o4Fn.WppQJ7&amp;gt;Z#1cQgV2(GX54S*)0@vQvFs^!/fag#p6kHgwB9{5)u:d9R
dp_res: q3U'GCA9;dw}9nrT#R?&quot;odw~HAK,&amp;amp;l;bd}VQ)h`15TAw6K/I1V]#;OSDj%(XmDp[&amp;amp;i}@$k($Bk8X4c&quot;j(rXff9MK:E#`&amp;gt;B&amp;amp;'SF`CgMP&amp;lt;`XOp!8g%&amp;amp;4fpbq&amp;lt;!Q*o4[9W}TXabj4FTele0?~Cm.S,8~)B(U9&amp;lt;m~[1.9/3XGR/@nIt,X3@k}D&quot;U&quot;h@!/C&amp;amp;92s09RU^DLrqo6[}s}Wlr:,VyYX&amp;gt;f{rx&amp;amp;&amp;gt;8bH`VaZy^3pId.A]XO/zgD@26wN:Y23@t(.&amp;gt;3$T6c8?L'l&quot;ZC?0PK,2tWNqa,S&amp;gt;VTe!!%L^n;;up&amp;lt;:Hw;gUtFp^dD]F8&amp;gt;!'}vg^PNK4K&quot;L7X&amp;lt;w;roH:&amp;amp;&amp;lt;jEzZJJPg5qd'J!SWTP%N!CDDaxr7vBX.4@)9OO!Mg;S;M';VSV]^YZO9ww9k$H;Z^XcXKY@?Naa&amp;lt;jO$LEy`#e1&amp;amp;ywU8Yzq9PNAA^gQ58B?'?)KiKt)$ztM~IrnJ&amp;lt;$;2%%?m&quot;&amp;lt;dme7df&amp;gt;:b?j.A8dM2dH/!K!*o)glG[F&amp;gt;&amp;lt;aZ?c`By5{zEICgq[&amp;lt;M:D&quot;LD;*FPJOzo9o,wXxKz@2];:g$oNrDhc/g{M9z9xTP[FllH/r!YrW!KMG!y(.$mO7Wzj31vMF2&amp;gt;YD?Y&quot;I?t7FX!nWL[S&amp;gt;kLN1Ga7YN'XrG*fxylmtBri/R!0nEGQ3ZG`xQ1o[~Z?1&amp;lt;VKMzKn90J^9#5J&amp;lt;:{3diD*o4Fn.WppQJ7&amp;gt;Z#1cQgV2(GX54S*)0@vQvFs^!/fag#p6kHgwB9{5)u:d9R

gst_time: 79.45418357849121 ms
dp_time: 10244.915962219238 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len = (5000, 8000)&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com_len = (250, 800)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;random string has been generated
gst_res: Hu4XU.if.j/h9DAT3.2RI&quot;9LVeR6qoG}HOB#V[qdN[TQ!%IG#v7l]'4pTA;.G^zhWt%/B0P4ATaG&amp;gt;FDZj?GNH&quot;V%NW(.uL?O.5tJCv6d7[}e.&amp;lt;$SFXv(C&amp;amp;ww&amp;gt;9a'Con(V}MK&amp;lt;exxZ@1.1&amp;lt;7&amp;lt;Wo%wGyjB0FPpcxPLIy^LRZS@c;eel4sUF:iqcGlhz3]z&amp;amp;M&amp;amp;]qk&amp;amp;.H3]vqI7YG)#&amp;amp;}U3sa&quot;6c6H*y{3&amp;gt;9MiHB!W4N1YwR[,qdn:nw$M&quot;g]Ic6S$*[FIzaOZ[fHT&amp;lt;04&amp;lt;$R$[f#.%MscaTy[6?gJ:Qq
dp_res: Hu4XU.if.j/h9DAT3.2RI&quot;9LVeR6qoG}HOB#V[qdN[TQ!%IG#v7l]'4pTA;.G^zhWt%/B0P4ATaG&amp;gt;FDZj?GNH&quot;V%NW(.uL?O.5tJCv6d7[}e.&amp;lt;$SFXv(C&amp;amp;ww&amp;gt;9a'Con(V}MK&amp;lt;exxZ@1.1&amp;lt;7&amp;lt;Wo%wGyjB0FPpcxPLIy^LRZS@c;eel4sUF:iqcGlhz3]z&amp;amp;M&amp;amp;]qk&amp;amp;.H3]vqI7YG)#&amp;amp;}U3sa&quot;6c6H*y{3&amp;gt;9MiHB!W4N1YwR[,qdn:nw$M&quot;g]Ic6S$*[FIzaOZ[fHT&amp;lt;04&amp;lt;$R$[f#.%MscaTy[6?gJ:Qq

gst_time: 63.52519989013672 ms
dp_time: 6668.108701705933 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len = (10000, 20000)&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com_len = (500, 1000)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;random string has been generated
gst_res: hee!!i$;hIn8&amp;amp;;Y)bU2BC^Bu{Ek]2}}`SvD&amp;gt;Fj!{%XS#pl6wMh#CDKe'zk%N@mAC]r9[k:g{!Q&amp;lt;B0NQ&quot;#&quot;E&amp;lt;P@in$7]^fkn3tO:5q:lb%!Y5N3[rJBd7I@,6Uf{hNv5o$M%~]~9IS4#ho}]3A&quot;~B9yLF!0'`R(}le0KAMF/J7@EG/d&amp;amp;W/m`XcBt[,Bp0M8m6J]%#mh.^&quot;:CsZw6~!w6eq[)WdAI/'D`Tq.`*t[H5yVEk3mpRKZv&amp;lt;eMZj'R?*zeA,!goeNt&quot;5th.0^LN2xB$wy.*xP(cCW4)zZv#XS.#&amp;lt;&amp;amp;*&quot;spzHfnG:78~P5z%a`Dn1g3&amp;gt;nF5CZm?;EfbKD/(g$!SIAxSRWce&quot;Qf'WbyceqGrh&amp;gt;uhP45R$:h?fJfEFk]@5P{]n2H/KgDGUA~`Q1'&amp;lt;Z}66!s#V&amp;gt;B%&amp;gt;B1L3cIq?;ytc/E?mDmA2;m5LwdI@8)l3@&amp;amp;ZpdKp0'f{VS@ahmmE!f.)kO(nNcVsU?yGEAzu&quot;I/RH:N6&quot;1xFvp~ipR~$7FJ@NLTs[VW^hng1bfc&amp;amp;!ieEbY.)uYN@Ux$(#~]WSyY/alVsiq1uv0u%tVx'kS&amp;gt;x}dkUN5&amp;amp;lY!xy&amp;amp;Y]:wZU;gIXZ&amp;gt;h)mS7,au
dp_res: hee!!i$;hIn8&amp;amp;;Y)bU2BC^Bu{Ek]2}}`SvD&amp;gt;Fj!{%XS#pl6wMh#CDKe'zk%N@mAC]r9[k:g{!Q&amp;lt;B0NQ&quot;#&quot;E&amp;lt;P@in$7]^fkn3tO:5q:lb%!Y5N3[rJBd7I@,6Uf{hNv5o$M%~]~9IS4#ho}]3A&quot;~B9yLF!0'`R(}le0KAMF/J7@EG/d&amp;amp;W/m`XcBt[,Bp0M8m6J]%#mh.^&quot;:CsZw6~!w6eq[)WdAI/'D`Tq.`*t[H5yVEk3mpRKZv&amp;lt;eMZj'R?*zeA,!goeNt&quot;5th.0^LN2xB$wy.*xP(cCW4)zZv#XS.#&amp;lt;&amp;amp;*&quot;spzHfnG:78~P5z%a`Dn1g3&amp;gt;nF5CZm?;EfbKD/(g$!SIAxSRWce&quot;Qf'WbyceqGrh&amp;gt;uhP45R$:h?fJfEFk]@5P{]n2H/KgDGUA~`Q1'&amp;lt;Z}66!s#V&amp;gt;B%&amp;gt;B1L3cIq?;ytc/E?mDmA2;m5LwdI@8)l3@&amp;amp;ZpdKp0'f{VS@ahmmE!f.)kO(nNcVsU?yGEAzu&quot;I/RH:N6&quot;1xFvp~ipR~$7FJ@NLTs[VW^hng1bfc&amp;amp;!ieEbY.)uYN@Ux$(#~]WSyY/alVsiq1uv0u%tVx'kS&amp;gt;x}dkUN5&amp;amp;lY!xy&amp;amp;Y]:wZU;gIXZ&amp;gt;h)mS7,au

gst_time: 164.72983360290527 ms
dp_time: 44179.36301231384 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Obviously, dynamic programming takes a lot longer time.&lt;/p&gt;

</description>
        <pubDate>Wed, 23 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/study/algorithm/2020/12/23/generalized-suffix-tree/</link>
        <guid isPermaLink="true">http://localhost:4000/study/algorithm/2020/12/23/generalized-suffix-tree/</guid>
      </item>
    
  </channel>
</rss>
